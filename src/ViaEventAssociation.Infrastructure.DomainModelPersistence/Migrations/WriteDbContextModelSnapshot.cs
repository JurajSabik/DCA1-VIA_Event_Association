// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ViaEventAssociation.Infrastructure.SqliteDmPersistence;

#nullable disable

namespace ViaEventAssociation.Infrastructure.SqliteDmPersistence.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.CreatorAgg.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "ViaEventAssociation.Core.Domain.CreatorAgg.Creator.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");
                        });

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.CreatorAgg.InviteEntity.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InviteStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("Invite");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.EventAgg.VeaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VeaEventStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VeaEventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "ViaEventAssociation.Core.Domain.EventAgg.VeaEvent.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaxGuests", "ViaEventAssociation.Core.Domain.EventAgg.VeaEvent.MaxGuests#MaxGuests", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("MaxGuests");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "ViaEventAssociation.Core.Domain.EventAgg.VeaEvent.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("TEXT")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.GuestAgg.Guest.VeaGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.GuestAgg.RequestEntity.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("EventId", "GuestId")
                        .IsUnique();

                    b.ToTable("Request");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.LocationAgg.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("FromTo", "ViaEventAssociation.Core.Domain.LocationAgg.Location.FromTo#FromTo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .HasColumnType("TEXT")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("TEXT")
                                .HasColumnName("Start");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaxGuests", "ViaEventAssociation.Core.Domain.LocationAgg.Location.MaxGuests#MaxGuests", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("MaxGuests");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ViaEventAssociation.Core.Domain.LocationAgg.Location.Name#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LocationName");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ViaEventAssociation.Infrastructure.SqliteDmPersistence.EntityM_Trial.EntityM", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EntityMs");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.CreatorAgg.InviteEntity.Invite", b =>
                {
                    b.HasOne("ViaEventAssociation.Core.Domain.CreatorAgg.Creator", null)
                        .WithMany("CreatedInvites")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViaEventAssociation.Core.Domain.EventAgg.VeaEvent", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViaEventAssociation.Core.Domain.GuestAgg.Guest.VeaGuest", null)
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.EventAgg.VeaEvent", b =>
                {
                    b.HasOne("ViaEventAssociation.Core.Domain.CreatorAgg.Creator", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViaEventAssociation.Core.Domain.LocationAgg.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.OwnsOne("ViaEventAssociation.Core.Domain.Common.ValueObjects.FromTo", "FromTo", b1 =>
                        {
                            b1.Property<Guid>("VeaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("End")
                                .HasColumnType("TEXT")
                                .HasColumnName("To");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("TEXT")
                                .HasColumnName("From");

                            b1.HasKey("VeaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("VeaEventId");
                        });

                    b.Navigation("FromTo");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.GuestAgg.Guest.VeaGuest", b =>
                {
                    b.OwnsOne("ViaEventAssociation.Core.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("VeaGuestId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("VeaGuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("VeaGuestId");
                        });

                    b.OwnsOne("ViaEventAssociation.Core.Domain.GuestAgg.Guest.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("VeaGuestId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.HasKey("VeaGuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("VeaGuestId");
                        });

                    b.OwnsOne("ViaEventAssociation.Core.Domain.GuestAgg.Guest.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("VeaGuestId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.HasKey("VeaGuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("VeaGuestId");
                        });

                    b.OwnsOne("ViaEventAssociation.Core.Domain.GuestAgg.Guest.PictureUrl", "PictureUrl", b1 =>
                        {
                            b1.Property<Guid>("VeaGuestId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PictureUrl");

                            b1.HasKey("VeaGuestId");

                            b1.ToTable("Guests");

                            b1.WithOwner()
                                .HasForeignKey("VeaGuestId");
                        });

                    b.Navigation("Email");

                    b.Navigation("FirstName");

                    b.Navigation("LastName");

                    b.Navigation("PictureUrl");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.GuestAgg.RequestEntity.Request", b =>
                {
                    b.HasOne("ViaEventAssociation.Core.Domain.EventAgg.VeaEvent", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViaEventAssociation.Core.Domain.GuestAgg.Guest.VeaGuest", null)
                        .WithMany("JoinRequests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.LocationAgg.Location", b =>
                {
                    b.HasOne("ViaEventAssociation.Core.Domain.CreatorAgg.Creator", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.CreatorAgg.Creator", b =>
                {
                    b.Navigation("CreatedInvites");
                });

            modelBuilder.Entity("ViaEventAssociation.Core.Domain.GuestAgg.Guest.VeaGuest", b =>
                {
                    b.Navigation("JoinRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
